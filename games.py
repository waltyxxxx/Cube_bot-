#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Game logic for casino games
"""

import random
import logging
from telegram import Update
from telegram.ext import ContextTypes
from crypto_payments import update_user_balance, get_user_balance
from user_data import get_user_data

logger = logging.getLogger(__name__)

async def play_even_odd(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, bet_choice, bet_amount):
    """
    Play even/odd game
    
    Args:
        update: Telegram update object
        context: Context object
        user_id: User ID
        bet_choice: 'even' or 'odd'
        bet_amount: Bet amount in TON
        
    Returns:
        dict: Result information including messages and dice value
    """
    # First subtract the bet amount from user balance
    current_balance = update_user_balance(user_id, -bet_amount)
    
    # Send dice animation
    message = await update.callback_query.message.reply_dice(emoji="üé≤")
    dice_value = message.dice.value
    
    # Determine if the result is even or odd
    is_even = dice_value % 2 == 0
    result_text = "–ß–µ—Ç" if is_even else "–ù–µ—á–µ—Ç"
    user_won = (bet_choice == "even" and is_even) or (bet_choice == "odd" and not is_even)
    
    # Format user-friendly bet choice text
    bet_choice_text = "–ß–µ—Ç" if bet_choice == "even" else "–ù–µ—á–µ—Ç"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—Ä–æ—Å–∫–∞
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_winnings = int(bet_amount * 1.5) if user_won else 0
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {dice_value} ({result_text})\n"
             f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_choice_text} ({bet_amount} TON)\n"
             f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'üéâ –í—ã–∏–≥—Ä—ã—à! +' + str(display_winnings) + ' TON' if user_won else 'üò¢ –ü—Ä–æ–∏–≥—Ä—ã—à! -' + str(bet_amount) + ' TON'}\n"
             f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} TON"
    )
    
    # Update balance if user won
    winnings = 0
    if user_won:
        winnings = int(bet_amount * 1.5)  # –£–º–µ–Ω—å—à–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å 2 –¥–æ 1.5
        update_user_balance(user_id, winnings)
    
    # Format user-friendly bet choice text
    bet_choice_text = "–ß–µ—Ç" if bet_choice == "even" else "–ù–µ—á–µ—Ç"
    
    # Create result message for user
    user_message = (
        f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –ß–µ—Ç/–ù–µ—á–µ—Ç:\n\n"
        f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_choice_text} - {bet_amount} TON\n"
        f"–í—ã–ø–∞–ª–æ: {dice_value} ({result_text})\n\n"
    )
    
    if user_won:
        user_message += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} TON!\n"
    else:
        user_message += f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount} TON.\n"
    
    user_message += f"\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} TON"
    
    # Create channel message
    username = update.callback_query.from_user.username or f"user{user_id}"
    channel_message = (
        f"üé≤ –ò–≥—Ä–∞: –ß–µ—Ç/–ù–µ—á–µ—Ç\n"
        f"–ò–≥—Ä–æ–∫: @{username}\n"
        f"–°—Ç–∞–≤–∫–∞: {bet_choice_text} - {bet_amount} TON\n"
        f"–í—ã–ø–∞–ª–æ: {dice_value} ({result_text})\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í—ã–∏–≥—Ä—ã—à ' + str(winnings) + ' TON' if user_won else '–ü—Ä–æ–∏–≥—Ä—ã—à ' + str(bet_amount) + ' TON'}"
    )
    
    logger.info(f"User {user_id} played even/odd game. Bet: {bet_choice}, Amount: {bet_amount}, Result: {dice_value}, Won: {user_won}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞–≤–∫–µ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    duplicate_message = (
        f"üéÆ –ò–≥—Ä–∞: –ß–µ—Ç/–Ω–µ—á–µ—Ç\n"
        f"üéØ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_choice_text} ({bet_amount} TON)\n"
        f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value} ({result_text})\n"
        f"üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í—ã–∏–≥—Ä—ã—à ' + str(winnings) + ' TON' if user_won else '–ü—Ä–æ–∏–≥—Ä—ã—à ' + str(bet_amount) + ' TON'}\n"
        f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} TON\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:\n"
        f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {get_user_data(user_id).get('games_played', 0) + 1}\n"
        f"üé≤ –ò–≥—Ä –≤ —Ä–µ–∂–∏–º–µ –ß–µ—Ç/–Ω–µ—á–µ—Ç: {get_user_data(user_id).get('even_odd_games', 0) + 1}"
    )
    
    return {
        "message": user_message,
        "channel_message": channel_message,
        "duplicate_message": duplicate_message,
        "dice_value": dice_value,
        "user_won": user_won,
        "winnings": winnings if user_won else -bet_amount
    }

async def play_higher_lower(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, bet_choice, bet_amount):
    """
    Play higher/lower game
    
    Args:
        update: Telegram update object
        context: Context object
        user_id: User ID
        bet_choice: 'higher' or 'lower'
        bet_amount: Bet amount in TON
        
    Returns:
        dict: Result information including messages and dice value
    """
    # First subtract the bet amount from user balance
    current_balance = update_user_balance(user_id, -bet_amount)
    
    # Send dice animation
    message = await update.callback_query.message.reply_dice(emoji="üé≤")
    dice_value = message.dice.value
    
    # Determine if the result is higher than 3 or lower than 4
    is_higher = dice_value > 3
    result_text = "–ë–æ–ª—å—à–µ 3" if is_higher else "–ú–µ–Ω—å—à–µ 4"
    user_won = (bet_choice == "higher" and is_higher) or (bet_choice == "lower" and not is_higher)
    
    # Format user-friendly bet choice text
    bet_choice_text = "–ë–æ–ª—å—à–µ 3" if bet_choice == "higher" else "–ú–µ–Ω—å—à–µ 4"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—Ä–æ—Å–∫–∞
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_winnings = int(bet_amount * 1.5) if user_won else 0
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {dice_value} ({result_text})\n"
             f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_choice_text} ({bet_amount} TON)\n"
             f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'üéâ –í—ã–∏–≥—Ä—ã—à! +' + str(display_winnings) + ' TON' if user_won else 'üò¢ –ü—Ä–æ–∏–≥—Ä—ã—à! -' + str(bet_amount) + ' TON'}\n"
             f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} TON"
    )
    
    # Update balance if user won
    winnings = 0
    if user_won:
        winnings = int(bet_amount * 1.5)  # –£–º–µ–Ω—å—à–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å 2 –¥–æ 1.5
        update_user_balance(user_id, winnings)
    
    # Format user-friendly bet choice text
    bet_choice_text = "–ë–æ–ª—å—à–µ 3" if bet_choice == "higher" else "–ú–µ–Ω—å—à–µ 4"
    
    # Create result message for user
    user_message = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ:\n\n"
        f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_choice_text} - {bet_amount} TON\n"
        f"–í—ã–ø–∞–ª–æ: {dice_value} ({result_text})\n\n"
    )
    
    if user_won:
        user_message += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} TON!\n"
    else:
        user_message += f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount} TON.\n"
    
    user_message += f"\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} TON"
    
    # Create channel message
    username = update.callback_query.from_user.username or f"user{user_id}"
    channel_message = (
        f"üìä –ò–≥—Ä–∞: –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ\n"
        f"–ò–≥—Ä–æ–∫: @{username}\n"
        f"–°—Ç–∞–≤–∫–∞: {bet_choice_text} - {bet_amount} TON\n"
        f"–í—ã–ø–∞–ª–æ: {dice_value} ({result_text})\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í—ã–∏–≥—Ä—ã—à ' + str(winnings) + ' TON' if user_won else '–ü—Ä–æ–∏–≥—Ä—ã—à ' + str(bet_amount) + ' TON'}"
    )
    
    logger.info(f"User {user_id} played higher/lower game. Bet: {bet_choice}, Amount: {bet_amount}, Result: {dice_value}, Won: {user_won}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞–≤–∫–µ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    duplicate_message = (
        f"üéÆ –ò–≥—Ä–∞: –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ\n"
        f"üéØ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_choice_text} ({bet_amount} TON)\n"
        f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value} ({result_text})\n"
        f"üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í—ã–∏–≥—Ä—ã—à ' + str(winnings) + ' TON' if user_won else '–ü—Ä–æ–∏–≥—Ä—ã—à ' + str(bet_amount) + ' TON'}\n"
        f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_balance(user_id)} TON\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:\n"
        f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {get_user_data(user_id).get('games_played', 0) + 1}\n"
        f"üìà –ò–≥—Ä –≤ —Ä–µ–∂–∏–º–µ –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ: {get_user_data(user_id).get('higher_lower_games', 0) + 1}"
    )
    
    return {
        "message": user_message,
        "channel_message": channel_message,
        "duplicate_message": duplicate_message,
        "dice_value": dice_value,
        "user_won": user_won,
        "winnings": winnings if user_won else -bet_amount
    }
