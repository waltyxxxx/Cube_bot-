#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Handler functions for the Telegram bot commands and callbacks
"""

import os
import datetime
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from user_data import (get_user_data, update_user_data, save_user_data, 
                      get_games_played, get_registration_date, get_favorite_game)
from crypto_payments import create_deposit_invoice, test_api_connection, create_fixed_invoice

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
RESULTS_CHANNEL_ID = os.getenv("RESULTS_CHANNEL_ID")

async def create_payment_url(user_id, bet_amount=4.0):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã–π URL –¥–ª—è CryptoBot —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        bet_amount: –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤ USD (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
        
    Returns:
        str: URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot —Å —ç–∫—Ä–∞–Ω–æ–º –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    """
    logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—ë–∂–Ω—ã–π —Å—á–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –í–ê–ñ–ù–û! –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å IV15707697
    # –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã, –∞ –ø–æ—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–≤–æ–¥–æ–º —Å—É–º–º—ã
    # –≠—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    fixed_invoice_url = "https://t.me/CryptoBot?start=IV15707697"
    logger.warning(f"===DEBUG=== –°–æ–∑–¥–∞–Ω–Ω—ã–π WebApp payment_url: {fixed_invoice_url}")
    return fixed_invoice_url

    # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
    """
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º USD –≤ TON (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    ton_amount = bet_amount / 6.0  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ TON/USD
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ API CryptoBot
        # –ü–æ–ª—É—á–∞–µ–º mini_app_invoice_url, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã
        invoice_url = await create_deposit_invoice(user_id, ton_amount)
        if isinstance(invoice_url, str) and invoice_url.startswith("https://"):
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂–Ω—ã–π URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {invoice_url}")
            return invoice_url
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ URL: {invoice_url}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–≤–æ–π—Å
            fallback_url = await create_deposit_invoice(user_id, 0.1)
            if isinstance(fallback_url, str) and fallback_url.startswith("https://"):
                return fallback_url
            return "https://t.me/CryptoBot"
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ URL: {e}")
        return "https://t.me/CryptoBot"
    """

async def send_channel_bet_message(context, user, game_type=None, bet_choice=None, bet_amount=4.0):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞–≤–∫–µ –≤ –∏–≥—Ä–æ–≤–æ–π –∫–∞–Ω–∞–ª –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    Args:
        context: Context –æ–±—ä–µ–∫—Ç
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        game_type: –¢–∏–ø –∏–≥—Ä—ã ('even_odd', 'higher_lower', 'bowling') –∏–ª–∏ None –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bet_choice: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('even', 'odd', 'higher', 'lower', 'win', 'lose') –∏–ª–∏ None
        bet_amount: –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤ USD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4.0)
    
    Returns:
        Message: –û–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ï—Å–ª–∏ game_type –∏ bet_choice —É–∫–∞–∑–∞–Ω—ã, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if game_type and bet_choice:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —Ä—É—Å—Å–∫–∏–π
        game_type_ru = {
            "higher_lower": "–ë–æ–ª—å—à–µ / –ú–µ–Ω—å—à–µ",
            "even_odd": "–ß–µ—Ç / –ù–µ—á–µ—Ç",
            "bowling": "–ë–æ—É–ª–∏–Ω–≥"
        }.get(game_type, game_type)
        
        bet_choice_ru = {
            "even": "–ß–µ—Ç", 
            "odd": "–ù–µ—á–µ—Ç", 
            "higher": "–ë–æ–ª—å—à–µ", 
            "lower": "–ú–µ–Ω—å—à–µ",
            "win": "–ü–æ–±–µ–¥–∞",
            "lose": "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
        }.get(bet_choice, bet_choice)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –ü–†–û–ò–ó–í–û–õ–¨–ù–û–ô —Å—É–º–º—ã
    logger.warning(f"üî¥üî¥üî¥ –°–û–ó–î–ê–ù–ò–ï –°–°–´–õ–ö–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ê –° –ü–†–û–ò–ó–í–û–õ–¨–ù–û–ô –°–£–ú–ú–û–ô –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É 0.1 TON, —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤–≤–µ–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
    # –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ CryptoBot –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É allow_custom_amount="true"
    payment_url = await create_payment_url(user.id, 0.1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç–µ CryptoBot
    channel_message = await context.bot.send_message(
        chat_id=RESULTS_CHANNEL_ID,
        text=(
            f"üéÆ *–ù–û–í–ê–Ø –°–¢–ê–í–ö–ê* üî•\n\n"
            f"üë§ –ò–≥—Ä–æ–∫: {user.first_name}\n\n"
            f"üìù *–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ:*\n\n"
            f"*–†–µ–∂–∏–º –∏ –∏—Å—Ö–æ–¥:*\n"
            f"‚Ä¢ üé≥ –ë–æ—É–ª–∏–Ω–≥: `–±–æ–ª - –ø–æ–±–µ–¥–∞` –∏–ª–∏ `–±–æ–ª - –ø–æ—Ä–∞–∂–µ–Ω–∏–µ`\n"
            f"‚Ä¢ üé≤ –ß–µ—Ç/–ù–µ—á–µ—Ç: `—á–µ—Ç` –∏–ª–∏ `–Ω–µ—á–µ—Ç`\n"
            f"‚Ä¢ üìä –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ: `–±–æ–ª—å—à–µ` –∏–ª–∏ `–º–µ–Ω—å—à–µ`\n\n"
            f"üëá *–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å —Å—É–º–º—É –æ—Ç 0.1 –¥–æ 10 TON* –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ CryptoBot:"
        ),
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=payment_url)],
            [InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")]
        ])
    )
    
    return channel_message

# Main menu keyboard
def get_main_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton("–ò–ì–†–ê–¢–¨", callback_data="play")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# Game selection keyboard
def get_game_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé≤ –ß–µ—Ç/–Ω–µ—á–µ—Ç", callback_data="game_even_odd")],
        [InlineKeyboardButton("üìä –ë–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", callback_data="game_higher_lower")],
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="game_bowling")],
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç API", callback_data="test_api")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /start command."""
    user = update.effective_user
    user_id = user.id
    
    # Initialize user data if first time
    user_data = get_user_data(user_id)
    if not user_data:
        user_data = {
            "user_id": user_id,
            "username": user.username or "Anonymous",
            "registration_date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "games_played": 0,
            "favorite_game": None,
            "balance": 0,
            "even_odd_games": 0,
            "higher_lower_games": 0,
            "last_activity": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        update_user_data(user_id, user_data)
        save_user_data()
    
    # Check if command contains game mode parameter
    if update.message and update.message.text:
        command_parts = update.message.text.split()
        if len(command_parts) > 1:
            game_param = command_parts[1]
            if game_param.startswith("IV"):
                # –≠—Ç–æ –∏–Ω–≤–æ–π—Å –æ—Ç CryptoBot, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass
    
    # Standard welcome message
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º –∫–∞–∑–∏–Ω–æ! üé∞üí• –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∞–∑–∞—Ä—Ç–∞ –∏ —É–¥–∞—á–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
        reply_markup=get_main_keyboard()
    )

async def profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle profile button click."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    games_played = get_games_played(user_id)
    registration_date = get_registration_date(user_id)
    favorite_game = get_favorite_game(user_id)
    
    games_text = f"üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä: {games_played}" if games_played > 0 else "üéÆ –í—ã –µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã!"
    favorite_text = f"‚ù§Ô∏è –õ—é–±–∏–º—ã–π —Ä–µ–∂–∏–º: {favorite_game}" if favorite_game else "‚ù§Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ª—é–±–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã."
    
    profile_text = (
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"{games_text}\n\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n\n"
        f"{favorite_text}"
    )
    
    await query.edit_message_text(
        text=profile_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )

async def play_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle play button click."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è - –¥–ª—è –ª–æ–≥–æ–≤
    channel_id = RESULTS_CHANNEL_ID
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
    fixed_channel_url = "https://t.me/test5363627"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    channel_url = fixed_channel_url
    
    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.warning(f"===DEBUG=== RESULTS_CHANNEL_ID={channel_id}, type={type(channel_id)}")
    logger.warning(f"===DEBUG=== –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: {channel_url}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–≥—Ä–æ–≤–æ–π –∫–∞–Ω–∞–ª
    user = query.from_user
    payment_url = await create_payment_url(user.id, 4.0)
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º URL –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.warning(f"===DEBUG PLAY HANDLER=== –°–æ–∑–¥–∞–Ω–Ω—ã–π payment_url: {payment_url}")
    logger.warning(f"===DEBUG PLAY HANDLER=== –¢–∏–ø payment_url: {type(payment_url)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    valid_url = isinstance(payment_url, str) and payment_url.startswith("https://")
    
    if not valid_url:
        logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π payment_url: {payment_url}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π URL.")
        payment_url = "https://t.me/CryptoBot"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç —Ä–µ–∂–∏–º –∏–≥—Ä—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    message = await send_channel_bet_message(context, user)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ
    if not context.user_data.get("bets"):
        context.user_data["bets"] = {}
    
    bet_id = f"{user.id}_{int(datetime.datetime.now().timestamp())}"
    context.user_data["bets"][bet_id] = {
        "game_type": "user_choice",  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
        "bet_choice": "user_choice", # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
        "message_id": message.message_id if message else None,
        "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª"
    await query.edit_message_text(
        text="üíé –•–æ—á–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É?\n\nüí∞ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–≤–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª –∏ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞–≤–∫–∏.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üé≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É

async def game_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle game selection."""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –∏–≥—Ä—ã: {query.data}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–≥—Ä—ã –∏–∑ callback_data
    parts = query.data.split("_", 1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É '_'
    
    if len(parts) != 2:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
        return
    
    prefix, game_type = parts
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞–≤–∫–µ
    user = query.from_user
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞–≤–∫–µ, –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É –∏–≥—Ä—ã
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç —Ä–µ–∂–∏–º –∏–≥—Ä—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await send_channel_bet_message(context, user, None, None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.edit_message_text(
        text="‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É.",
        reply_markup=get_main_keyboard()
    )

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle cancel button click or unknown text messages."""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        if query.data == "back_to_main":
            await query.edit_message_text(
                text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º –∫–∞–∑–∏–Ω–æ! üé∞üí• –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∞–∑–∞—Ä—Ç–∞ –∏ —É–¥–∞—á–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                reply_markup=get_main_keyboard()
            )
    elif update.message:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
            reply_markup=get_main_keyboard()
        )

async def instruction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ CryptoBot WebApp
    user_id = query.from_user.id
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    instruction_text = "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –≤–∞–º —Å—É–º–º—É (–æ—Ç 0.1 –¥–æ 10 TON)"
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π URL –¥–ª—è –ø—Ä—è–º–æ–π –æ–ø–ª–∞—Ç—ã –≤ —á–∞—Ç–µ CryptoBot —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    logger.warning(f"üî¥üî¥üî¥ –°–û–ó–î–ê–ù–ò–ï –°–°–´–õ–ö–ò –í –ò–ù–°–¢–†–£–ö–¶–ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    payment_url = await create_payment_url(user_id, 0.1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º URL –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.warning(f"===DEBUG=== –°–æ–∑–¥–∞–Ω–Ω—ã–π WebApp payment_url: {payment_url}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å—Ç–∞–≤–∫–∏
    await query.edit_message_text(
        text=instruction_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=payment_url)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )

async def send_welcome_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /welcome –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
    if update.effective_chat.type in ['group', 'supergroup', 'channel']:
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            payment_url = await create_payment_url(context._application.bot.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å—Ç–∞–≤–∫–∏
            welcome_message = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! *–°–∫–æ—Ä–µ–µ –ª—É—Ç–∞–π –∫–µ—à* ‚Üì‚Üì‚Üì‚Üì"
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=welcome_message,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=payment_url)]
                ])
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É {update.effective_chat.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        await update.message.reply_text(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö."
        )

async def test_api_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API CryptoBot"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback query)
    is_callback = False
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        # –≠—Ç–æ callback query (–∫–Ω–æ–ø–∫–∞)
        is_callback = True
        message = await query.edit_message_text("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CryptoBot API...")
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        message = await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CryptoBot API...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    api_result = await test_api_connection()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"API test result: {api_result}")
    
    if api_result.get("success"):
        await message.edit_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CryptoBot API!\n\n"
            f"App ID: {api_result.get('app_id')}\n"
            f"Name: {api_result.get('name')}\n\n"
            f"–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂..."
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π URL –Ω–∞ –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É
        user_id = update.effective_user.id
        amount = 0.1  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ API —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π
        logger.warning(f"üî¥üî¥üî¥ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ò–ù–í–û–ô–°–ê —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É TON, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –Ω—É–∂–Ω—É—é —Å—É–º–º—É
        payment_url = await create_payment_url(user_id, 0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ URL
        if isinstance(payment_url, str) and payment_url.startswith("https://"):
            test_success_text = (
                f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π URL —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"–°—É–º–º–∞: {amount} TON\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:"
            )
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            test_instructions = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
            
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if is_callback:
                # –î–ª—è –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await message.edit_text(
                    text=test_success_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç", url=payment_url)],
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=test_instructions,
                    parse_mode="Markdown"
                )
            else:
                # –î–ª—è –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π reply
                await update.message.reply_text(
                    text=test_success_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç", url=payment_url)]
                    ])
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(
                    text=test_instructions,
                    parse_mode="Markdown"
                )
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            error_message = payment_url if isinstance(payment_url, str) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ URL:\n\n{error_message}"
            
            if is_callback:
                await message.edit_text(
                    text=error_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            else:
                await message.edit_text(error_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.error(f"Error creating test payment URL: {error_message}")
    else:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CryptoBot API:\n\n{api_result.get('message')}"
        
        if is_callback:
            await message.edit_text(
                text=error_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
        else:
            await message.edit_text(error_text)

async def chat_member_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle bot being added to or removed from a chat"""
    chat_member = update.my_chat_member
    chat_id = chat_member.chat.id
    
    if chat_member.new_chat_member.status in ["administrator", "member"]:
        logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª
        try:
            welcome_message = (
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! *–°–∫–æ—Ä–µ–µ –ª—É—Ç–∞–π –∫–µ—à* ‚Üì‚Üì‚Üì‚Üì"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π
            chat_type = update.effective_chat.type
            logger.info(f"–¢–∏–ø —á–∞—Ç–∞: {chat_type}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            payment_url = await create_payment_url(context._application.bot.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å—Ç–∞–≤–∫–∏
            await context.bot.send_message(
                chat_id=chat_id,
                text=welcome_message,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=payment_url)]
                ])
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    elif chat_member.new_chat_member.status in ["left", "kicked"]:
        logger.info(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}")